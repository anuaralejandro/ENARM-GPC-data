#!/usr/bin/env python3
"""
üéØ FIND GPC ULTRA - MODO DIOS
Sistema de b√∫squeda y validaci√≥n de alt√≠sima calidad para GPCs mexicanas.

CARACTER√çSTICAS:
‚úÖ OCR GPU avanzado en espa√±ol (EasyOCR)
‚úÖ Prioriza cat√°logo IMSS (ya validado manualmente)
‚úÖ Distingue "Diagn√≥stico" vs "Tratamiento" con inferencia sem√°ntica
‚úÖ Convierte primera p√°gina a imagen para OCR robusto
‚úÖ Validaci√≥n cruzada t√≠tulo-contenido
‚úÖ Manejo inteligente de texto no seleccionable

CALIDAD ENTERPRISE para:
- Sistema de salud mexicano (IMSS, ISSSTE, SSA)
- Referencia nacional para manejo de pacientes
- Preparaci√≥n ENARM (examen residencias m√©dicas)
"""

import os
import sys
import json
import re
import time
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
import requests
from pathlib import Path

# GPU OCR
import easyocr
import fitz  # PyMuPDF
from PIL import Image
import io
import numpy as np

# Embeddings sem√°nticos
from sentence_transformers import SentenceTransformer
import torch


# ============================================================================
# CONFIGURACI√ìN
# ============================================================================

@dataclass
class GPCSearchConfig:
    """Configuraci√≥n del sistema de b√∫squeda."""
    
    # OCR GPU
    ocr_languages: List[str] = None
    ocr_gpu: bool = True
    ocr_threshold: float = 0.5
    
    # B√∫squeda
    google_api_key: str = None
    google_cse_id: str = None
    search_sleep: float = 1.0
    
    # Validaci√≥n
    min_confidence: float = 0.85  # 85% m√≠nimo enterprise
    use_imss_first: bool = True  # Priorizar cat√°logo IMSS
    
    # Paths
    imss_catalog_path: str = "data/imss_catalog_cache.json"
    temario_path: str = "docs/# Temario ENARM - Gu√≠as de Pr√°ctica Cl√≠n.md"
    output_path: str = "data/gpc_links_ultra.json"
    
    def __post_init__(self):
        if self.ocr_languages is None:
            self.ocr_languages = ['es', 'en']  # Espa√±ol + Ingl√©s
        
        if self.google_api_key is None:
            self.google_api_key = os.getenv("GOOGLE_API_KEY")
        
        if self.google_cse_id is None:
            self.google_cse_id = os.getenv("GOOGLE_CSE_ID")


# ============================================================================
# OCR GPU AVANZADO
# ============================================================================

class GPUOCREngine:
    """
    üöÄ Motor OCR GPU de alt√≠sima calidad para texto m√©dico espa√±ol.
    
    Usa EasyOCR en GPU con:
    - Detecci√≥n de texto en espa√±ol m√©dico
    - Conversi√≥n de PDF a imagen (primera p√°gina)
    - Manejo robusto de texto no seleccionable
    """
    
    def __init__(self, languages=['es', 'en'], gpu=True):
        print(f"[OCR GPU] Inicializando EasyOCR (idiomas: {languages}, GPU: {gpu})...")
        self.reader = easyocr.Reader(languages, gpu=gpu)
        print(f"‚úÖ OCR GPU listo")
    
    def extract_title_from_pdf(
        self,
        pdf_bytes: bytes,
        fallback_to_text: bool = True
    ) -> Tuple[str, float, str]:
        """
        Extrae t√≠tulo del PDF usando OCR GPU.
        
        Estrategia:
        1. Intentar extraer texto seleccionable de primera p√°gina
        2. Si texto es sospechoso (s√≠mbolos raros), usar OCR
        3. Convertir primera p√°gina a imagen y aplicar OCR GPU
        
        Returns:
            (titulo, confianza, metodo)
        """
        try:
            doc = fitz.open(stream=pdf_bytes, filetype="pdf")
            first_page = doc[0]
            
            # Estrategia 1: Intentar texto seleccionable
            if fallback_to_text:
                text = first_page.get_text("text")
                if self._is_text_valid(text):
                    title, conf = self._extract_title_from_text(text)
                    if conf >= 0.6:
                        doc.close()
                        return title, conf, "text_selectable"
            
            # Estrategia 2: OCR GPU (SIEMPRE para m√°xima calidad)
            print(f"      [OCR GPU] Convirtiendo primera p√°gina a imagen...")
            
            # Convertir p√°gina a imagen de alta resoluci√≥n
            pix = first_page.get_pixmap(matrix=fitz.Matrix(3, 3))  # 3x = 300 DPI
            img_data = pix.tobytes("png")
            img = Image.open(io.BytesIO(img_data))
            
            # Convertir a numpy array para EasyOCR
            img_np = np.array(img)
            
            # Aplicar OCR GPU
            print(f"      [OCR GPU] Ejecutando reconocimiento...")
            results = self.reader.readtext(img_np)
            
            # Procesar resultados OCR
            title, conf = self._process_ocr_results(results)
            
            doc.close()
            return title, conf, "ocr_gpu"
        
        except Exception as e:
            print(f"      ‚ö†Ô∏è  Error OCR GPU: {e}")
            return "", 0.0, "error"
    
    def _is_text_valid(self, text: str) -> bool:
        """
        Verifica si texto seleccionable es v√°lido.
        
        Detecta texto corrupto (s√≠mbolos raros, encoding incorrecto).
        """
        if not text or len(text.strip()) < 20:
            return False
        
        # Contar caracteres extra√±os
        weird_chars = sum(1 for c in text if ord(c) > 127 and c not in '√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë√º√ú')
        weird_ratio = weird_chars / len(text)
        
        # Si >30% son caracteres raros ‚Üí texto corrupto
        if weird_ratio > 0.3:
            return False
        
        # Buscar patrones de texto corrupto
        corrupt_patterns = [
            r'[$¬£‚Ç¨¬•]{5,}',  # Muchos s√≠mbolos de moneda
            r'[‚ñà‚ñì‚ñí‚ñë]{5,}',  # Bloques
            r'[\x00-\x1F]{5,}',  # Caracteres de control
        ]
        
        for pattern in corrupt_patterns:
            if re.search(pattern, text):
                return False
        
        return True
    
    def _extract_title_from_text(self, text: str) -> Tuple[str, float]:
        """
        Extrae t√≠tulo de texto seleccionable.
        
        Busca patrones:
        - "Gu√≠a de Pr√°ctica Cl√≠nica"
        - "Diagn√≥stico y tratamiento de..."
        - L√≠neas en may√∫sculas
        """
        lines = [l.strip() for l in text.split('\n') if l.strip()]
        
        # Patr√≥n 1: L√≠nea despu√©s de "GPC" o "Gu√≠a"
        for i, line in enumerate(lines):
            if 'gu√≠a' in line.lower() or 'gpc' in line.lower():
                if i + 1 < len(lines):
                    title = lines[i + 1]
                    if len(title) > 20 and len(title) < 150:
                        return title, 0.8
        
        # Patr√≥n 2: L√≠nea con "Diagn√≥stico", "Tratamiento", "Prevenci√≥n"
        keywords = ['diagn√≥stico', 'tratamiento', 'prevenci√≥n', 'manejo', 'detecci√≥n']
        for line in lines[:10]:  # Primeras 10 l√≠neas
            if any(kw in line.lower() for kw in keywords) and len(line) > 20:
                return line, 0.7
        
        # Patr√≥n 3: L√≠nea en may√∫sculas larga
        for line in lines[:10]:
            if line.isupper() and len(line) > 20 and len(line) < 150:
                return line.title(), 0.6
        
        # Fallback: primera l√≠nea larga
        for line in lines[:5]:
            if len(line) > 20:
                return line, 0.4
        
        return "", 0.0
    
    def _process_ocr_results(self, results: List[Tuple]) -> Tuple[str, float]:
        """
        Procesa resultados de EasyOCR para extraer t√≠tulo.
        
        Args:
            results: Lista de (bbox, texto, confianza) de EasyOCR
        
        Returns:
            (titulo, confianza_promedio)
        """
        if not results:
            return "", 0.0
        
        # Filtrar resultados por confianza y posici√≥n vertical
        # T√≠tulo suele estar en el tercio superior de la p√°gina
        page_height = max(r[0][2][1] for r in results) if results else 1000
        upper_third = page_height / 3
        
        candidates = []
        for bbox, text, conf in results:
            # Verificar si est√° en tercio superior
            y_center = (bbox[0][1] + bbox[2][1]) / 2
            if y_center < upper_third and conf > 0.5:
                candidates.append((text, conf))
        
        if not candidates:
            # Si no hay candidatos en tercio superior, tomar todos con alta confianza
            candidates = [(text, conf) for bbox, text, conf in results if conf > 0.6]
        
        # Buscar l√≠neas con palabras clave m√©dicas
        medical_keywords = [
            'diagn√≥stico', 'tratamiento', 'prevenci√≥n', 'manejo',
            'gu√≠a', 'pr√°ctica', 'cl√≠nica', 'enfermedad'
        ]
        
        best_title = ""
        best_conf = 0.0
        
        for text, conf in candidates:
            text_lower = text.lower()
            keyword_count = sum(1 for kw in medical_keywords if kw in text_lower)
            
            # Score: confianza OCR + bonus por keywords
            score = conf + (keyword_count * 0.1)
            
            if score > best_conf and len(text) > 20:
                best_title = text
                best_conf = conf
        
        # Si no encontramos nada bueno, concatenar primeras l√≠neas
        if not best_title:
            texts = [text for text, conf in candidates[:3]]
            best_title = ' '.join(texts)
            best_conf = sum(conf for _, conf in candidates[:3]) / max(len(candidates[:3]), 1)
        
        return best_title, best_conf


# ============================================================================
# CLASIFICADOR SEM√ÅNTICO AVANZADO
# ============================================================================

class MedicalGPCClassifier:
    """
    üß† Clasificador sem√°ntico para GPCs m√©dicas mexicanas.
    
    Resuelve problemas de:
    - Distinguir "Diagn√≥stico" vs "Tratamiento" vs "Prevenci√≥n"
    - Validar coherencia t√≠tulo-contenido
    - Inferir GPC correcta cuando OCR falla
    """
    
    def __init__(self, model_name='paraphrase-multilingual-mpnet-base-v2'):
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        print(f"[Clasificador] Cargando modelo en {self.device}...")
        self.model = SentenceTransformer(model_name, device=self.device)
        print(f"‚úÖ Clasificador listo")
        
        # Cat√°logo de conceptos m√©dicos (basado en temario ENARM)
        self.medical_concepts = {
            'diagnostico': [
                'diagn√≥stico', 'detecci√≥n', 'tamizaje', 'screening',
                'abordaje diagn√≥stico', 'identificaci√≥n', 'evaluaci√≥n diagn√≥stica'
            ],
            'tratamiento': [
                'tratamiento', 'manejo', 'terap√©utica', 'intervenci√≥n',
                'abordaje terap√©utico', 'quir√∫rgico', 'm√©dico'
            ],
            'prevencion': [
                'prevenci√≥n', 'profilaxis', 'vacunaci√≥n', 'inmunizaci√≥n',
                'control', 'educaci√≥n'
            ],
        }
        
        # Pre-computar embeddings de conceptos
        self.concept_embeddings = {}
        for concept, keywords in self.medical_concepts.items():
            self.concept_embeddings[concept] = [
                self.model.encode(kw, convert_to_tensor=True)
                for kw in keywords
            ]
    
    def classify_gpc_type(self, title: str) -> Tuple[str, float]:
        """
        Clasifica tipo de GPC: diagn√≥stico, tratamiento, o prevenci√≥n.
        
        Returns:
            (tipo, confianza)
        """
        title_emb = self.model.encode(title, convert_to_tensor=True)
        
        best_concept = None
        best_similarity = 0.0
        
        for concept, embs in self.concept_embeddings.items():
            for emb in embs:
                sim = torch.nn.functional.cosine_similarity(
                    title_emb.unsqueeze(0),
                    emb.unsqueeze(0)
                )
                sim_value = float(sim.item())
                
                if sim_value > best_similarity:
                    best_similarity = sim_value
                    best_concept = concept
        
        return best_concept, best_similarity
    
    def detect_confusion(
        self,
        expected_title: str,
        extracted_title: str
    ) -> Optional[str]:
        """
        Detecta confusi√≥n entre GPCs similares.
        
        Ejemplo:
        - Esperado: "Diagn√≥stico de apendicitis"
        - Extra√≠do: "Tratamiento de apendicitis"
        ‚Üí Confusi√≥n detectada
        
        Returns:
            Mensaje de advertencia o None
        """
        exp_type, exp_conf = self.classify_gpc_type(expected_title)
        ext_type, ext_conf = self.classify_gpc_type(extracted_title)
        
        # Si ambos tienen alta confianza pero tipos diferentes
        if exp_conf > 0.7 and ext_conf > 0.7 and exp_type != ext_type:
            return f"confusion_{exp_type}_vs_{ext_type}"
        
        return None
    
    def calculate_similarity(self, text1: str, text2: str) -> float:
        """Calcula similitud sem√°ntica entre dos textos."""
        emb1 = self.model.encode(text1, convert_to_tensor=True)
        emb2 = self.model.encode(text2, convert_to_tensor=True)
        
        sim = torch.nn.functional.cosine_similarity(
            emb1.unsqueeze(0),
            emb2.unsqueeze(0)
        )
        
        return float(sim.item())


# ============================================================================
# CAT√ÅLOGO IMSS
# ============================================================================

class IMSSCatalogProvider:
    """
    üìö Proveedor de GPCs del cat√°logo IMSS (pre-validado manualmente).
    
    PRIORIDAD M√ÅXIMA: El cat√°logo IMSS ya est√° perfecto.
    """
    
    def __init__(self, catalog_path: str):
        self.catalog_path = catalog_path
        self.catalog = self._load_catalog()
        print(f"‚úÖ Cat√°logo IMSS cargado: {len(self.catalog)} GPCs")
    
    def _load_catalog(self) -> List[Dict]:
        """Carga cat√°logo IMSS desde JSON."""
        try:
            with open(self.catalog_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('entries', [])
        except Exception as e:
            print(f"‚ö†Ô∏è  Error cargando cat√°logo IMSS: {e}")
            return []
    
    def search(
        self,
        title: str,
        classifier: MedicalGPCClassifier,
        threshold: float = 0.75
    ) -> Optional[Dict]:
        """
        Busca GPC en cat√°logo IMSS por similitud sem√°ntica.
        
        Args:
            title: T√≠tulo de GPC buscada
            classifier: Clasificador sem√°ntico
            threshold: Umbral de similitud m√≠nimo
        
        Returns:
            Entrada del cat√°logo o None
        """
        if not self.catalog:
            return None
        
        best_match = None
        best_similarity = 0.0
        
        for entry in self.catalog:
            catalog_title = entry.get('title', '')
            
            # Calcular similitud
            sim = classifier.calculate_similarity(title, catalog_title)
            
            # Verificar coherencia de tipo (diagn√≥stico vs tratamiento)
            confusion = classifier.detect_confusion(title, catalog_title)
            
            # Si hay confusi√≥n, penalizar similitud
            if confusion:
                sim *= 0.7  # Reducir 30%
            
            if sim > best_similarity and sim >= threshold:
                best_similarity = sim
                best_match = entry
        
        if best_match:
            print(f"      ‚úÖ Encontrado en IMSS: {best_match['title'][:60]}... (similitud: {best_similarity:.2%})")
            return {
                'ger_url': best_match.get('ger_url'),
                'grr_url': best_match.get('grr_url'),
                'source': 'imss_catalog',
                'confidence': best_similarity
            }
        
        return None


# ============================================================================
# B√öSQUEDA GOOGLE CSE
# ============================================================================

class GoogleCSEProvider:
    """Proveedor de b√∫squeda Google Custom Search."""
    
    def __init__(self, api_key: str, cse_id: str):
        self.api_key = api_key
        self.cse_id = cse_id
    
    def search(self, query: str, num: int = 10) -> List[str]:
        """
        Ejecuta b√∫squeda en Google CSE.
        
        Returns:
            Lista de URLs (solo PDFs)
        """
        url = "https://www.googleapis.com/customsearch/v1"
        params = {
            'key': self.api_key,
            'cx': self.cse_id,
            'q': query,
            'num': min(num, 10)
        }
        
        try:
            r = requests.get(url, params=params, timeout=30)
            r.raise_for_status()
            data = r.json()
            items = data.get('items', [])
            
            # Filtrar solo PDFs
            pdfs = [
                item['link']
                for item in items
                if item.get('link', '').lower().endswith('.pdf')
            ]
            
            return pdfs
        
        except Exception as e:
            print(f"      ‚ö†Ô∏è  Error en b√∫squeda Google: {e}")
            return []


# ============================================================================
# ORQUESTADOR PRINCIPAL
# ============================================================================

class UltraGPCFinder:
    """
    üéØ Orquestador principal - MODO DIOS.
    
    Estrategia de b√∫squeda:
    1. ‚úÖ Cat√°logo IMSS (m√°xima prioridad)
    2. ‚úÖ Google CSE CENETEC
    3. ‚úÖ Google CSE IMSS
    4. ‚úÖ Google CSE .mx gen√©rico
    
    Para cada resultado:
    - OCR GPU en primera p√°gina
    - Clasificaci√≥n sem√°ntica
    - Validaci√≥n cruzada t√≠tulo-contenido
    - Detecci√≥n de confusi√≥n diagn√≥stico vs tratamiento
    """
    
    def __init__(self, config: GPCSearchConfig):
        self.config = config
        
        # Inicializar componentes
        self.ocr = GPUOCREngine(config.ocr_languages, config.ocr_gpu)
        self.classifier = MedicalGPCClassifier()
        self.imss = IMSSCatalogProvider(config.imss_catalog_path)
        self.google = GoogleCSEProvider(config.google_api_key, config.google_cse_id)
    
    def search_gpc(self, title: str, gpc_type: str) -> Optional[Dict]:
        """
        Busca GPC con estrategia multinivel.
        
        Args:
            title: T√≠tulo de GPC (del temario ENARM)
            gpc_type: "GER" o "GRR"
        
        Returns:
            {'url': str, 'confidence': float, 'source': str}
        """
        print(f"\nüîç Buscando: {title} ({gpc_type})")
        
        # ESTRATEGIA 1: Cat√°logo IMSS (M√ÅXIMA PRIORIDAD)
        if self.config.use_imss_first:
            imss_result = self.imss.search(title, self.classifier)
            if imss_result:
                url_key = 'ger_url' if gpc_type == 'GER' else 'grr_url'
                url = imss_result.get(url_key)
                if url:
                    # Validar con OCR GPU
                    validated = self._validate_url(url, title, gpc_type)
                    if validated and validated['confidence'] >= self.config.min_confidence:
                        return validated
                    else:
                        print(f"      ‚ö†Ô∏è  URL IMSS no alcanz√≥ confianza: {validated['confidence']:.2%} < {self.config.min_confidence:.2%}")
        
        # ESTRATEGIA 2: Google CSE CENETEC
        print(f"   [Google] Buscando en CENETEC...")
        cenetec_result = self._search_google_cenetec(title, gpc_type)
        if cenetec_result and cenetec_result['confidence'] >= self.config.min_confidence:
            return cenetec_result
        
        # ESTRATEGIA 3: Google CSE IMSS
        print(f"   [Google] Buscando en IMSS...")
        imss_google_result = self._search_google_imss(title, gpc_type)
        if imss_google_result and imss_google_result['confidence'] >= self.config.min_confidence:
            return imss_google_result
        
        # ESTRATEGIA 4: Google CSE .mx gen√©rico (√∫ltimo recurso)
        print(f"   [Google] Buscando en dominios .mx...")
        mx_result = self._search_google_mx(title, gpc_type)
        if mx_result and mx_result['confidence'] >= 0.75:  # Threshold menor para .mx
            return mx_result
        
        print(f"   ‚ùå No se encontr√≥ GPC con confianza suficiente")
        return None
    
    def _search_google_cenetec(self, title: str, gpc_type: str) -> Optional[Dict]:
        """Busca en CENETEC v√≠a Google CSE."""
        query = f'"{title}" {gpc_type} filetype:pdf site:cenetec-difusion.com OR site:cenetec.salud.gob.mx'
        results = self.google.search(query, num=5)
        time.sleep(self.config.search_sleep)
        
        for url in results:
            validated = self._validate_url(url, title, gpc_type)
            if validated and validated['confidence'] >= self.config.min_confidence:
                return validated
        
        return None
    
    def _search_google_imss(self, title: str, gpc_type: str) -> Optional[Dict]:
        """Busca en IMSS v√≠a Google CSE."""
        query = f'"{title}" {gpc_type} filetype:pdf site:imss.gob.mx'
        results = self.google.search(query, num=5)
        time.sleep(self.config.search_sleep)
        
        for url in results:
            validated = self._validate_url(url, title, gpc_type)
            if validated and validated['confidence'] >= self.config.min_confidence:
                return validated
        
        return None
    
    def _search_google_mx(self, title: str, gpc_type: str) -> Optional[Dict]:
        """Busca en dominios .mx gen√©ricos."""
        query = f'"{title}" {gpc_type} filetype:pdf site:.mx'
        results = self.google.search(query, num=5)
        time.sleep(self.config.search_sleep)
        
        for url in results:
            validated = self._validate_url(url, title, gpc_type)
            if validated and validated['confidence'] >= 0.75:
                return validated
        
        return None
    
    def _validate_url(self, url: str, expected_title: str, expected_type: str) -> Optional[Dict]:
        """
        Valida URL con OCR GPU y clasificaci√≥n sem√°ntica.
        
        Returns:
            {'url': str, 'confidence': float, 'source': str, 'title_extracted': str}
        """
        try:
            print(f"      Validando: {url[:80]}...")
            
            # Descargar PDF
            r = requests.get(url, timeout=20)
            r.raise_for_status()
            pdf_bytes = r.content
            
            # OCR GPU en primera p√°gina
            extracted_title, ocr_conf, ocr_method = self.ocr.extract_title_from_pdf(pdf_bytes)
            
            if not extracted_title:
                print(f"      ‚ùå No se pudo extraer t√≠tulo")
                return None
            
            print(f"      üìÑ T√≠tulo extra√≠do ({ocr_method}): {extracted_title[:60]}...")
            
            # Calcular similitud sem√°ntica
            title_sim = self.classifier.calculate_similarity(expected_title, extracted_title)
            
            # Detectar confusi√≥n (diagn√≥stico vs tratamiento)
            confusion = self.classifier.detect_confusion(expected_title, extracted_title)
            if confusion:
                print(f"      ‚ö†Ô∏è  CONFUSI√ìN DETECTADA: {confusion}")
                title_sim *= 0.5  # Penalizaci√≥n severa
            
            # Validar tipo de documento por URL
            url_type = self._classify_url_type(url)
            type_match = (url_type == expected_type) if url_type else 0.8
            
            # Confianza compuesta
            confidence = (
                0.60 * title_sim +       # 60% similitud t√≠tulo
                0.25 * ocr_conf +         # 25% confianza OCR
                0.15 * type_match         # 15% match tipo URL
            )
            
            print(f"      üìä Confianza: {confidence:.2%} (t√≠tulo: {title_sim:.2%}, OCR: {ocr_conf:.2%}, tipo: {type_match:.2%})")
            
            return {
                'url': url,
                'confidence': confidence,
                'source': self._get_source_from_url(url),
                'title_extracted': extracted_title,
                'ocr_method': ocr_method
            }
        
        except Exception as e:
            print(f"      ‚ùå Error validando URL: {e}")
            return None
    
    def _classify_url_type(self, url: str) -> Optional[str]:
        """Clasifica tipo de documento por URL."""
        url_lower = url.lower()
        
        # CENETEC: /ER.pdf = GER, /RR.pdf = GRR
        if url_lower.endswith('/er.pdf'):
            return 'GER'
        if url_lower.endswith('/rr.pdf'):
            return 'GRR'
        
        # IMSS: XXXGER.pdf, XXXGRR.pdf
        if 'ger.pdf' in url_lower:
            return 'GER'
        if 'grr.pdf' in url_lower:
            return 'GRR'
        
        return None
    
    def _get_source_from_url(self, url: str) -> str:
        """Determina fuente por URL."""
        url_lower = url.lower()
        
        if 'cenetec' in url_lower:
            return 'cenetec'
        if 'imss' in url_lower:
            return 'imss'
        if 'issste' in url_lower:
            return 'issste'
        if 'salud.gob.mx' in url_lower:
            return 'ssa'
        
        return 'otro_mx'


# ============================================================================
# EXTRACTOR DE TEMARIO ENARM
# ============================================================================

def extract_gpcs_from_temario(temario_path: str) -> List[Dict]:
    """
    Extrae lista de GPCs del temario ENARM (Markdown).
    
    Busca l√≠neas con:
    - **GPC Diagn√≥stico de...**
    - **GPC Tratamiento de...**
    - etc.
    
    Returns:
        Lista de {'title': str, 'ger': bool, 'grr': bool}
    """
    gpcs = []
    
    try:
        with open(temario_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Buscar l√≠neas con "GPC"
        gpc_pattern = re.compile(r'\*\*GPC\s+(.+?)\*\*', re.IGNORECASE)
        matches = gpc_pattern.findall(content)
        
        for match in matches:
            title = match.strip()
            
            # Limpiar t√≠tulo
            title = re.sub(r'\s+\d{4}$', '', title)  # Quitar a√±o al final
            title = re.sub(r'\s+', ' ', title)
            
            gpcs.append({
                'title': title,
                'ger': True,  # Siempre buscar ambos
                'grr': True
            })
        
        print(f"‚úÖ Extra√≠das {len(gpcs)} GPCs del temario ENARM")
        return gpcs
    
    except Exception as e:
        print(f"‚ùå Error extrayendo GPCs del temario: {e}")
        return []


# ============================================================================
# MAIN
# ============================================================================

def main():
    print("""
================================================================================
üéØ FIND GPC ULTRA - MODO DIOS v1.0
Sistema de b√∫squeda y validaci√≥n de alt√≠sima calidad para GPCs mexicanas
================================================================================
    """)
    
    # Configuraci√≥n
    config = GPCSearchConfig()
    
    # Inicializar finder
    finder = UltraGPCFinder(config)
    
    # Extraer GPCs del temario ENARM
    gpcs = extract_gpcs_from_temario(config.temario_path)
    
    if not gpcs:
        print("‚ùå No se encontraron GPCs en el temario")
        return 1
    
    # Procesar cada GPC
    results = []
    
    for i, gpc in enumerate(gpcs, 1):
        print(f"\n[{i}/{len(gpcs)}] {gpc['title']}")
        
        result = {
            'title': gpc['title'],
            'ger_url': None,
            'grr_url': None,
            'ger_confidence': 0.0,
            'grr_confidence': 0.0,
            'ger_source': None,
            'grr_source': None,
            'ger_title_extracted': None,
            'grr_title_extracted': None,
        }
        
        # Buscar GER
        if gpc['ger']:
            ger_result = finder.search_gpc(gpc['title'], 'GER')
            if ger_result:
                result['ger_url'] = ger_result['url']
                result['ger_confidence'] = ger_result['confidence']
                result['ger_source'] = ger_result['source']
                result['ger_title_extracted'] = ger_result.get('title_extracted')
        
        # Buscar GRR
        if gpc['grr']:
            grr_result = finder.search_gpc(gpc['title'], 'GRR')
            if grr_result:
                result['grr_url'] = grr_result['url']
                result['grr_confidence'] = grr_result['confidence']
                result['grr_source'] = grr_result['source']
                result['grr_title_extracted'] = grr_result.get('title_extracted')
        
        results.append(result)
        
        # Guardar incrementalmente
        with open(config.output_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"   ‚úÖ GER: {result['ger_confidence']:.1%} | GRR: {result['grr_confidence']:.1%}")
        
        # Sleep entre GPCs
        time.sleep(config.search_sleep)
    
    # Estad√≠sticas finales
    print(f"""
================================================================================
üìä ESTAD√çSTICAS FINALES
================================================================================

Total GPCs procesadas: {len(results)}
GER encontradas: {sum(1 for r in results if r['ger_url'])} ({sum(1 for r in results if r['ger_url'])*100/len(results):.1f}%)
GRR encontradas: {sum(1 for r in results if r['grr_url'])} ({sum(1 for r in results if r['grr_url'])*100/len(results):.1f}%)
Ambas encontradas: {sum(1 for r in results if r['ger_url'] and r['grr_url'])} ({sum(1 for r in results if r['ger_url'] and r['grr_url'])*100/len(results):.1f}%)

Confianza promedio GER: {sum(r['ger_confidence'] for r in results)/len(results):.1%}
Confianza promedio GRR: {sum(r['grr_confidence'] for r in results)/len(results):.1%}

Fuentes GER:
  IMSS: {sum(1 for r in results if r['ger_source'] == 'imss' or r['ger_source'] == 'imss_catalog')}
  CENETEC: {sum(1 for r in results if r['ger_source'] == 'cenetec')}
  Otro .mx: {sum(1 for r in results if r['ger_source'] and 'imss' not in r['ger_source'] and 'cenetec' not in r['ger_source'])}

Fuentes GRR:
  IMSS: {sum(1 for r in results if r['grr_source'] == 'imss' or r['grr_source'] == 'imss_catalog')}
  CENETEC: {sum(1 for r in results if r['grr_source'] == 'cenetec')}
  Otro .mx: {sum(1 for r in results if r['grr_source'] and 'imss' not in r['grr_source'] and 'cenetec' not in r['grr_source'])}

‚úÖ Resultados guardados en: {config.output_path}
================================================================================
    """)
    
    return 0


if __name__ == '__main__':
    sys.exit(main())
